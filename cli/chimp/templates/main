package main

import (
	"fmt"
	"net/http"
	"os"

	"github.com/go-chi/chi/v5"
	"github.com/joho/godotenv"

	"github.com/s00500/chimp"
	"github.com/s00500/chimp/store"

	"{{.ProjectName}}/state"
	"{{.ProjectName}}/templates"

	"github.com/a-h/templ"

	log "github.com/s00500/env_logger"
)

// TODO: enable this to ensure static fs embedding if needed
// //go:embed static/*
// var staticFS embed.FS

var sessionKey = []byte{}

func main() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Warn("Error loading .env file")
	}

	if os.Getenv("GOENV") == "dev" {
		sessionKey = []byte("simple-key")
		templates.CacheBust = true
	}

	baseURL := ""
	appName := "{{.ProjectName}}"

	r := chi.NewRouter()

	mw := store.CreateSessionStore[state.ClientState](appName, store.CookieStore(sessionKey))

	r.Use(mw)
	r.Use(chimp.UrlPathMiddleware(baseURL)) // Middleware to handle using the URL in your templates

	// TODO: Register your handlers here. Tipp: use a seperate file or package for handlerfunctions

	r.Get(baseURL+"/", templ.Handler(templates.Index()).ServeHTTP)

	r.Post("/events", func(w http.ResponseWriter, r *http.Request) {
		// TODO: Do something
	})

	//------------

	// TODO: Use static or embedded serving. Make sure your embedded fs is setup correctly
	chimp.ServeIncludedAssets(r, "")
	// chimp.ServeStaticFromEmbedded(r, staticFS, "static")

	chimp.ServeHotReload(r, baseURL, os.Getenv("GOENV") == "dev")

	port := 8090
	chimp.ServeStatic(r, "static", "static")

	log.Infof("{{.ProjectName}} is listening on port http://127.0.0.1:%d", port)
	log.MustFatal(http.ListenAndServe(fmt.Sprintf(":%d", port), r))
}
