package main

import (
	"archive/zip"
	"bytes"
	"flag"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func main() {
	var version string
	flag.StringVar(&version, "version", "", "the version of HeroIcons")

	flag.Parse()

	req, err := http.NewRequest(http.MethodGet, getDownloadLink(version), nil)
	if err != nil {
		panic(err)
	}
	req.Header.Add("User-Agent", "heroiconsgo-generator/0.1.0")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	contents, err := io.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	zipReader, err := zip.NewReader(bytes.NewReader(contents), int64(len(contents)))
	if err != nil {
		panic(err)
	}

	baseDirectoryName := "heroicons-" + version[1:] + "/optimized/"

	var icons = make(map[string]string)

	for _, file := range zipReader.File {
		if file.FileInfo().IsDir() || !strings.HasPrefix(file.Name, baseDirectoryName) {
			continue
		}

		style := filepath.Base(filepath.Dir(file.Name))
		iconName := filepath.Base(file.Name)
		iconName = iconName[0 : len(iconName)-len(filepath.Ext(iconName))]

		fileBody, err := file.Open()
		if err != nil {
			panic(err)
		}

		fileContents, err := io.ReadAll(fileBody)
		fileBody.Close()
		if err != nil {
			panic(err)
		}

		icons[style+"-"+iconName] = escapeSvg(string(fileContents))
	}

	tmplSrc := `// Code generated by heroiconsgo-generator; DO NOT EDIT.

package heroiconsgo

var _icons = map[string]string{
%{ range $id, $val := .Icons }%	"%{ $id }%": "%{ $val }%",
%{ end }%}
`

	tmpl, err := template.New(".go").Delims("%{", "}%").Parse(tmplSrc)
	if err != nil {
		panic(err)
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, map[string]any{
		"Icons": icons,
	}); err != nil {
		panic(err)
	}

	f, err := os.Create("icons_generated.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	f.Write(buf.Bytes())
}

func getDownloadLink(version string) string {
	return "https://github.com/tailwindlabs/heroicons/archive/refs/tags/" + version + ".zip"
}

func escapeSvg(raw string) string {
	var escaped string

	escaped = raw
	escaped = strings.ReplaceAll(escaped, "\n", `\n`)
	escaped = strings.ReplaceAll(escaped, "\"", `\"`)

	return escaped
}
